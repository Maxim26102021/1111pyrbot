name: Build and Deploy to Server

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push reader image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: reader/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/reader:latest

    - name: Build and push bot image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: bot/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME}}/bot:latest

    - name: Deploy to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_SESSION_NAME: ${{ secrets.TELEGRAM_SESSION_NAME }}
        TZ: ${{ secrets.TZ }}
      run: |
        # Создаём временный SSH-ключ
        echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Создаём директорию на сервере и устанавливаем права
        ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_HOST "
          mkdir -p /var/www/myapp
          mkdir -p /var/www/myapp/sessions/bot
          chmod -R 777 /var/www/myapp/sessions
        "
        
        # Копируем всю структуру проекта (кроме .git), избегая удаления существующих сессий
        rsync -avz --exclude='sessions/bot/*' --delete-excluded -e "ssh -o StrictHostKeyChecking=no -i private_key" --exclude='.git' --exclude='.github' ./ $SERVER_USER@$SERVER_HOST:/var/www/myapp/
        
        # Останавливаем и удаляем старые контейнеры
        ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_HOST "docker compose down || true"
        ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_HOST "docker rm -f \$(docker ps -a -q) || true"
        
        # Создаём .env и запускаем
        ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_HOST "cd /var/www/myapp && \
          echo 'POSTGRES_DB=$POSTGRES_DB' > .env && \
          echo 'POSTGRES_USER=$POSTGRES_USER' >> .env && \
          echo 'POSTGRES_PASSWORD=$POSTGRES_PASSWORD' >> .env && \
          echo 'POSTGRES_HOST=$POSTGRES_HOST' >> .env && \
          echo 'POSTGRES_PORT=$POSTGRES_PORT' >> .env && \
          echo 'REDIS_HOST=$REDIS_HOST' >> .env && \
          echo 'REDIS_PORT=$REDIS_PORT' >> .env && \
          echo 'DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME' >> .env && \
          echo 'BOT_TOKEN=$BOT_TOKEN' >> .env && \
          echo 'GEMINI_API_KEY=$GEMINI_API_KEY' >> .env && \
          echo 'LOG_LEVEL=$LOG_LEVEL' >> .env && \
          echo 'TELEGRAM_API_HASH=$TELEGRAM_API_HASH' >> .env && \
          echo 'TELEGRAM_API_ID=$TELEGRAM_API_ID' >> .env && \
          echo 'TELEGRAM_SESSION_NAME=$TELEGRAM_SESSION_NAME' >> .env && \
          echo 'TZ=$TZ' >> .env && \
          docker compose pull && \
          docker compose up -d --remove-orphans && \
          docker system prune -f && \
          docker compose logs bot"
        
        # Чистим
        rm -rf private_key
