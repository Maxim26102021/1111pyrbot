import os
import sys
import asyncio
import logging
from datetime import datetime, timedelta

import pytz
from pyrogram import Client, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import text as sql

from common.db import run_migrations, session_scope
from common.models import (
    upsert_user, get_user_by_tg, set_user_hours,
    subscribe_user_to_channel, list_user_channels, remove_user_channel,
    due_users, get_user_window_messages, save_digest
)
from common.summarize import build_digest

# ---------- LOGGING ----------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    force=True,
)
logger = logging.getLogger("promteo_bot")

# ---------- ENV & CLIENT SETUP ----------
try:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    API_ID = int(os.getenv("TELEGRAM_API_ID"))
    API_HASH = os.getenv("TELEGRAM_API_HASH")
    if not all([BOT_TOKEN, API_ID, API_HASH]):
        raise ValueError("One of the required env variables is missing")
    TZ = pytz.timezone(os.getenv("TZ", "Europe/Amsterdam"))
except (ValueError, TypeError) as e:
    logger.critical(f"FATAL: Env variables are not configured correctly. Error: {e}")
    sys.exit(1)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–µ—Å—Å–∏—é
bot = Client(
    "/app/sessions/bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler(timezone=str(TZ))

HELP = (
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
    "/add @–∫–∞–Ω–∞–ª ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
    "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
    "/remove @–∫–∞–Ω–∞–ª ‚Äî —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
    "/when HH:MM HH:MM ‚Äî –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤\n"
    "/digest_now ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–∫–Ω–æ\n"
    "/plan ‚Äî —Ç–∞—Ä–∏—Ñ—ã\n"
    "/buy ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å Pro (–∑–∞–≥–ª—É—à–∫–∞)\n"
)

# ---------- UTILS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------
def parse_hours(args):
    hours = []
    for t in args:
        try:
            h, _ = t.split(":")
            h = int(h)
            if 0 <= h <= 23:
                hours.append(h)
        except Exception:
            continue
    return sorted(set(hours))

def pick(obj, key, default=None):
    try:
        return getattr(obj, key)
    except Exception:
        try:
            return obj[key]
        except Exception:
            return default

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def send_text_in_chunks(chat_id: int, text: str):
    MAX = 4096
    if len(text) <= MAX:
        await bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
        return
    parts, buf = [], ""
    for para in text.split("\n\n"):
        cand = (buf + ("\n\n" if buf else "") + para)
        if len(cand) > MAX:
            if buf:
                parts.append(buf); buf = para
                if len(buf) > MAX:
                    while len(buf) > MAX:
                        parts.append(buf[:MAX]); buf = buf[MAX:]
            else:
                p = para
                while len(p) > MAX:
                    parts.append(p[:MAX]); p = p[MAX:]
                buf = p
        else:
            buf = cand
    if buf:
        parts.append(buf)
    for p in parts:
        await bot.send_message(chat_id=chat_id, text=p, disable_web_page_preview=True)

def window_for_now(now: datetime):
    h = now.hour
    if h < 12:
        start = (now - timedelta(hours=12)).replace(minute=0, second=0, microsecond=0)
        end = now.replace(minute=0, second=0, microsecond=0)
    else:
        start = now.replace(hour=9, minute=0, second=0, microsecond=0)
        end = now.replace(minute=0, second=0, microsecond=0)
    return start, end


# ---------- HANDLERS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------
@bot.on_message(filters.command("start") & filters.private, group=0)
async def on_start(_, m):
    try:
        upsert_user(m.from_user.id)
        await m.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–∏—Å—ã–ª–∞—é –¥–∞–π–¥–∂–µ—Å—Ç 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å.\n\n" + HELP)
    except Exception:
        logger.exception("Error in /start")
        try: await m.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        except Exception: pass

@bot.on_message(filters.private, group=1)
async def catch_all_messages(_, message):
    logger.info(f"Non-command message from {message.from_user.id}: {getattr(message, 'text', None)!r}")


# === DEBUG: –ª–æ–≥–∏—Ä—É–µ–º –≤–æ–æ–±—â–µ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
@bot.on_message(group=-1)
async def __debug_all_updates(_, m):
    try:
        logger.info(f"[DEBUG] update: chat_type={getattr(m.chat, 'type', None)} from={getattr(m.from_user, 'id', None)} text={getattr(m,'text',None)!r}")
    except Exception:
        logger.exception("debug logger failed")


# ---------- DIGEST & SCHEDULER (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------
async def send_digest_to_user(user):
    user_id = pick(user, "id")
    tg_id = pick(user, "tg_id")
    now = datetime.now(TZ)
    start, end = window_for_now(now)
    try:
        items = get_user_window_messages(user_id, start, end) or []
        uniq = {}
        for it in items:
            key = it.get("text_hash")
            if key and key not in uniq:
                uniq[key] = {"text": it.get("text"), "link": it.get("link")}
        items_list = list(uniq.values())
        digest = (build_digest(items_list) or "").strip()
        if not digest or digest == "–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ù–û–í–û–°–¢–ï–ô":
            return
        save_digest(user_id, start, end, len(items_list), digest, sent_to="user")
        await send_text_in_chunks(chat_id=tg_id, text=digest)
    except Exception:
        logger.exception(f"Error sending digest to user {user_id}")

async def scheduler_tick():
    now = datetime.now(TZ)
    try:
        users = due_users(now.hour, now.minute) or []
        for u in users:
            await send_digest_to_user(u)
    except Exception:
        logger.exception("Scheduler tick failed")


# ---------- MAIN LOGIC ----------
def startup_tasks():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –î–û –∑–∞–ø—É—Å–∫–∞ Pyrogram
    logger.info("Running startup tasks...")
    try:
        run_migrations()
        scheduler.add_job(scheduler_tick, "cron", minute="0,30")
        scheduler.start()
        logger.info("Migrations and scheduler setup complete.")
    except Exception:
        logger.exception("Startup tasks failed!")
        # –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã
        # sys.exit(1)

if __name__ == "__main__":
    logger.info("Starting bot application...")
    # 1. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    startup_tasks()

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ bot.run().
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º, –∑–∞–ø—É—Å–∫–æ–º, –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–æ SIGTERM.
    # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "attached to a different loop".
    bot.run()

    # –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ Ctrl+C)
    if scheduler.running:
        scheduler.shutdown()
    logger.info("Bot application stopped.")