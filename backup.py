import os
import pytz
import asyncio
import logging
from datetime import datetime, timedelta

from pyrogram import Client, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import text as sql

from common.db import run_migrations, session_scope
from common.models import (
    upsert_user, get_user_by_tg, set_user_hours,
    subscribe_user_to_channel, list_user_channels, remove_user_channel,
    due_users, get_user_window_messages, save_digest
)
from common.summarize import build_digest

# 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 2. –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
BOT_TOKEN = os.getenv('BOT_TOKEN')
TZ = pytz.timezone(os.getenv('TZ', 'Europe/Amsterdam'))
API_ID = int(os.getenv('TELEGRAM_API_ID'))
API_HASH = os.getenv('TELEGRAM_API_HASH')

# 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê PYROGRAM
bot = Client('promteo_bot', api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

HELP = (
    """–ö–æ–º–∞–Ω–¥—ã:
    /start ‚Äî –Ω–∞—á–∞—Ç—å
    /add @–∫–∞–Ω–∞–ª ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
    /list ‚Äî —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    /remove @–∫–∞–Ω–∞–ª ‚Äî —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
    /when HH:MM HH:MM ‚Äî –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (—á–∞—Å—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
    /digest_now ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–∫–Ω–æ (—Ç–µ—Å—Ç)
    /plan ‚Äî —Ç–∞—Ä–∏—Ñ—ã
    /buy ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å Pro (–∑–∞–≥–ª—É—à–∫–∞)
    """
)

def parse_hours(args):
    hours = []
    for t in args:
        try:
            h, m = t.split(':')
            hours.append(int(h))
        except:
            continue
    return sorted(list(set([h for h in hours if 0 <= h <= 23])))

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–°–ù–ê–ß–ê–õ–ê –ö–û–ù–ö–†–ï–¢–ù–´–ï) ---

@bot.on_message(filters.command('start') & filters.private)
async def on_start(_, m):
    try:
        upsert_user(m.from_user.id)
        await m.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–∏—Å—ã–ª–∞—é –¥–∞–π–¥–∂–µ—Å—Ç 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å.\n\n" + HELP
        )
    except Exception as e:
        logger.error(f"Error in /start handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_message(filters.command('add') & filters.private)
async def on_add(_, m):
    try:
        parts = m.text.split()
        if len(parts) < 2:
            return await m.reply_text("–£–∫–∞–∂–∏ @–∫–∞–Ω–∞–ª. –ü—Ä–∏–º–µ—Ä: /add @neuralnews")
        handle = parts[1]
        subscribe_user_to_channel(m.from_user.id, handle)
        await m.reply_text(f"–î–æ–±–∞–≤–∏–ª {handle}. –ü—É–±–ª–∏—á–Ω—ã–µ ‚Äî —á–∏—Ç–∞—é —Å—Ä–∞–∑—É. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ.")
    except Exception as e:
        logger.error(f"Error in /add handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_message(filters.command('list') & filters.private)
async def on_list(_, m):
    try:
        lst = list_user_channels(m.from_user.id)
        if not lst:
            return await m.reply_text("–ü—É—Å—Ç–æ. –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥–æ–π /add @–∫–∞–Ω–∞–ª")
        await m.reply_text("–¢–≤–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(lst))
    except Exception as e:
        logger.error(f"Error in /list handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.")

@bot.on_message(filters.command('remove') & filters.private)
async def on_remove(_, m):
    try:
        parts = m.text.split()
        if len(parts) < 2:
            return await m.reply_text("–£–∫–∞–∂–∏ @–∫–∞–Ω–∞–ª. –ü—Ä–∏–º–µ—Ä: /remove @neuralnews")
        remove_user_channel(m.from_user.id, parts[1])
        await m.reply_text("–ì–æ—Ç–æ–≤–æ.")
    except Exception as e:
        logger.error(f"Error in /remove handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.")

@bot.on_message(filters.command('when') & filters.private)
async def on_when(_, m):
    try:
        parts = m.text.split()[1:]
        hours = parse_hours(parts)
        if not hours:
            return await m.reply_text("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ç–∞–∫: /when 09:00 19:30")
        set_user_hours(m.from_user.id, hours)
        await m.reply_text(f"–û–∫! –ß–∞—Å—ã –¥–∞–π–¥–∂–µ—Å—Ç–∞: {', '.join(map(str, hours))}")
    except Exception as e:
        logger.error(f"Error in /when handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_message(filters.command('plan') & filters.private)
async def on_plan(_, m):
    try:
        await m.reply_text("Free: –¥–æ 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. Pro: –¥–æ 100 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–∫–Ω–∞. –û—Ñ–æ—Ä–º–∏—Ç—å: /buy (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")
    except Exception as e:
        logger.error(f"Error in /plan handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_message(filters.command('buy') & filters.private)
async def on_buy(_, m):
    try:
        with session_scope() as s:
            s.execute(sql("""UPDATE users SET plan='pro', valid_until=NOW() + INTERVAL '30 days' WHERE tg_id=:tg"""), {'tg': m.from_user.id})
        await m.reply_text("–ì–æ—Ç–æ–≤–æ! –í–∫–ª—é—á–∏–ª Pro –Ω–∞ 30 –¥–Ω–µ–π (–∑–∞–≥–ª—É—à–∫–∞).")
    except Exception as e:
        logger.error(f"Error in /buy handler for user {m.from_user.id}: {e}")
        await m.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.on_message(filters.command('digest_now') & filters.private)
async def on_digest_now(_, m):
    try:
        u = get_user_by_tg(m.from_user.id)
        if not u:
            upsert_user(m.from_user.id)
            u = get_user_by_tg(m.from_user.id)
        await send_digest_to_user(u)
        await m.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–π–¥–∂–µ—Å—Ç (–µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π).")
    except Exception as e:
        logger.error(f"Error in /digest_now handler for user {m.from_user.id}: {e}")
        await m.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# --- –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–í –°–ê–ú–û–ú –ö–û–ù–¶–ï, –ß–¢–û–ë–´ –ù–ï –ú–ï–®–ê–¢–¨ –î–†–£–ì–ò–ú) ---
@bot.on_message(filters.private)
async def catch_all_messages(_, message):
    logger.info(f"!!! –ü–û–ô–ú–ê–õ –°–û–û–ë–©–ï–ù–ò–ï (–Ω–µ –∫–æ–º–∞–Ω–¥–∞): '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} !!!")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏.")

def window_for_now(now: datetime):
    h = now.hour
    if h < 12:
        start = (now - timedelta(hours=12)).replace(minute=0, second=0, microsecond=0)
        end = now.replace(minute=0, second=0, microsecond=0)
    else:
        start = now.replace(hour=9, minute=0, second=0, microsecond=0)
        end = now.replace(minute=0, second=0, microsecond=0)
    return start, end

async def send_digest_to_user(user):
    user_id = user['id']
    now = datetime.now(TZ)
    start, end = window_for_now(now)
    try:
        items = get_user_window_messages(user_id, start, end)
        uniq = {}
        for it in items:
            key = it.get('text_hash')
            if key not in uniq:
                uniq[key] = {'text': it.get('text'), 'link': it.get('link')}
        items_list = list(uniq.values())
        digest = build_digest(items_list)
        if digest.strip() == '–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ù–û–í–û–°–¢–ï–ô':
            return
        save_digest(user_id, start, end, len(items_list), digest, sent_to='user')
        await bot.send_message(chat_id=user['tg_id'], text=digest, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error sending digest to user {user_id}: {e}")

async def scheduler_tick():
    now = datetime.now(TZ)
    try:
        users = due_users(now.hour, now.minute)
        for u in users:
            await send_digest_to_user(u)
    except Exception as e:
        logger.error(f"Scheduler tick failed: {e}")

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
async def main():
    async with bot:
        run_migrations()
        scheduler = AsyncIOScheduler(timezone=str(TZ))
        scheduler.add_job(scheduler_tick, 'cron', minute='0,30')
        scheduler.start()
        logger.info("Bot up and running, scheduler started.")
        await asyncio.Event().wait()

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –ü–†–û–ì–†–ê–ú–ú–£ ---
if __name__ == '__main__':
    logger.info("Starting bot...")
    asyncio.run(main())
