services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-digest}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-digest}
      POSTGRES_DB: ${DB_NAME:-digest}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-digest} -d ${DB_NAME:-digest}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  migrate:
    build:
      context: ../
      dockerfile: services/migrate/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  bot:
    build:
      context: ../
      dockerfile: services/bot/Dockerfile
    env_file:
      - .env
    command: ["bash", "-lc", "./services/bot/entrypoint.sh"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.connect((\"redis\",6379)); s.close(); print(\"ok\")'"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - internal

  ingest:
    build:
      context: ../
      dockerfile: services/ingest/Dockerfile
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../telethon_sessions:/sessions
    networks:
      - internal

  summarizer:
    build:
      context: ../
      dockerfile: services/summarizer/Dockerfile
    command: ["bash", "-lc", "./services/summarizer/entrypoint.sh"]
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - internal

  scheduler:
    build:
      context: ../
      dockerfile: services/scheduler/Dockerfile
    env_file:
      - .env
    command: ["bash", "-lc", "./services/scheduler/entrypoint.sh"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      summarizer:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "celery -A services.scheduler.app.celery_app inspect ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - internal

  payments:
    build:
      context: ../
      dockerfile: services/payments/Dockerfile
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - internal

volumes:
  postgres_data:
  redis_data:

networks:
  internal:
    driver: bridge
